{"version":3,"sources":["App.js","index.js"],"names":["spotifyApi","SpotifyWebApi","App","access_token","getHashParams","window","history","replaceState","document","title","setAccessToken","state","loggedIn","nowPlaying","name","artists","albumArt","lyrics","timer","setInterval","getNowPlaying","e","hashParams","r","q","location","hash","substring","exec","decodeURIComponent","this","getMyCurrentPlaybackState","then","response","item","setState","map","artist","album","images","url","getLyrics","err","a","fetch","encodeURI","text","data","DOMParser","parseFromString","items","querySelectorAll","forEach","el","innerHTML","replace","replaceAll","Page","Content","Song","Title","Artists","join","AlbumArt","src","alt","Lyrics","split","lyric","index","key","Lyric","Footer","Link","href","Component","styled","img","p","div","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.d230e223.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\nimport styled from \"styled-components\";\nimport SpotifyWebApi from \"spotify-web-api-js\";\n\n// Declare a new SpotifyWebApi object\nconst spotifyApi = new SpotifyWebApi();\n\nexport default class App extends Component {\n  constructor() {\n    super();\n\n    // Get access_token from params\n    var { access_token } = this.getHashParams() || null;\n\n    if (access_token) {\n      // Clear params from url\n      window.history.replaceState({}, document.title, \"/\");\n\n      // Set the access_token for the SpotifyWebApi\n      spotifyApi.setAccessToken(access_token);\n\n      // Set the initial state for the component\n      this.state = {\n        loggedIn: true,\n        nowPlaying: { name: \"\", artists: [], albumArt: \"\" },\n        lyrics: \"\",\n      };\n\n      // Start refresh timer to get the currently playing song.\n      this.timer = setInterval(() => this.getNowPlaying(), 1000);\n    } else {\n      this.state = { loggedIn: false, nowPlaying: { name: \"\", artists: [], albumArt: \"\" }, lyrics: \"\" };\n    }\n  }\n\n  getHashParams() {\n    // Used to get the hashed params from the url\n    var hashParams = {};\n    var e,\n      r = /([^&;=]+)=?([^&;]*)/g,\n      q = window.location.hash.substring(1);\n    e = r.exec(q);\n    while (e) {\n      hashParams[e[1]] = decodeURIComponent(e[2]);\n      e = r.exec(q);\n    }\n    return hashParams;\n  }\n\n  getNowPlaying() {\n    const { loggedIn, nowPlaying } = this.state;\n\n    if (loggedIn) {\n      spotifyApi.getMyCurrentPlaybackState().then(\n        (response) => {\n          if (response) {\n            if (response.item.name !== nowPlaying.name) {\n              this.setState({\n                nowPlaying: {\n                  name: response.item.name,\n                  artists: response.item.artists.map((artist) => artist.name),\n                  albumArt: response.item.album.images[0].url,\n                },\n                lyrics: \"Loading...\",\n              });\n\n              this.getLyrics();\n            }\n          } else {\n            this.setState({\n              lyrics: \"Nothing is playing right now...\\nStart playing something on your Spotify account. \",\n              nowPlaying: { name: \"\", artists: [], albumArt: \"\" },\n            });\n          }\n        },\n        (err) => {\n          this.setState({ loggedIn: false });\n        }\n      );\n    }\n  }\n\n  async getLyrics() {\n    const { nowPlaying } = this.state;\n\n    // Returns the according Genius page for the current song and artist in text format.\n    await fetch(\"/lyrics?song=\" + encodeURI(nowPlaying.name) + \"&artist=\" + encodeURI(nowPlaying.artists[0]))\n      .then((response) => response.text())\n      .then((data) => new window.DOMParser().parseFromString(data, \"text/html\"))\n      .then((document) => {\n        const items = document.querySelectorAll('div[class^=\"Lyrics__Container\"]');\n        let lyrics = \"\";\n        items.forEach((el) => {\n          lyrics +=\n            el.innerHTML\n              .replace(/<br>/g, \"\\n\")\n              .replace(/<(?!\\s*br\\s*\\/?)[^>]+>/gi, \"\")\n              .replaceAll(\"amp;\", \"\") + \"\\n\";\n        });\n        if (lyrics) {\n          this.setState({ lyrics: lyrics });\n        } else {\n          this.setState({ lyrics: \"[Lyrics Not Found]\" });\n        }\n      });\n  }\n\n  render() {\n    const { loggedIn, nowPlaying, lyrics } = this.state;\n    const { name, artists, albumArt } = nowPlaying;\n\n    if (!loggedIn) {\n      // Redirect to Spotify Login page.\n      window.location.href = \"/login\";\n    } else {\n      return (\n        <Page>\n          <Content>\n            <Song>\n              {name && artists && albumArt && (\n                <>\n                  <Title>{name}</Title>\n                  <Artists>{artists.join(\", \")}</Artists>\n                  <AlbumArt src={albumArt} alt=\"\" />\n                </>\n              )}\n            </Song>\n            <Lyrics>\n              {lyrics.split(/\\r?\\n/).map((lyric, index) => {\n                return lyric === \"\" ? <br key={index} /> : <Lyric key={index}>{lyric}</Lyric>;\n              })}\n            </Lyrics>\n          </Content>\n          <Footer>\n            <Link href=\"https://evanwilcox.com\">Evan Wilcox</Link>\n          </Footer>\n        </Page>\n      );\n    }\n  }\n}\n\nconst AlbumArt = styled.img`\n  height: 400px;\n  width: 400px;\n  margin: 25px 0px 50px 0px;\n`;\n\nconst Artists = styled.p`\n  font-size: 30px;\n  margin: 0px;\n`;\n\nconst Content = styled.div`\n  width: \"100%\";\n  display: flex;\n  flex-direction: row-reverse;\n  flex-wrap: wrap;\n  justify-content: space-around;\n  padding-bottom: 100px;\n`;\n\nconst Footer = styled.div`\n  width: calc(100% - 100px);\n  margin: 0px auto;\n  position: absolute;\n  bottom: 0;\n  text-align: center;\n  padding-bottom: 30px;\n`;\n\nconst Link = styled.a`\n  text-decoration: none;\n  color: black;\n\n  &::visited {\n    color: black;\n  }\n  &::hover {\n    color: gray;\n  }\n`;\n\nconst Lyric = styled.p`\n  font-size: 25px;\n  margin: 0px;\n`;\n\nconst Lyrics = styled.div`\n  min-width: 500px;\n  max-width: 700px;\n`;\n\nconst Page = styled.div`\n  min-height: calc(100vh - 100px);\n  max-width: 100%;\n  position: relative;\n  padding: 50px 50px 0px 50px;\n  overflow-x: hidden;\n`;\n\nconst Song = styled.div`\n  min-width: 400px;\n  max-width: 600px;\n`;\n\nconst Title = styled.p`\n  font-size: 50px;\n  overflow-wrap: break-word;\n  margin: 0px;\n`;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}